ld  : Load           : ld  $Rt, $Rs, immad : 1000 ---- ---- ---- : $Rt = MEM[$Rs + ZeroExt(immad)*2]
st  : Store          : st  $Rt, $Rs, immad : 1001 ---- ---- ---- : MEM[$Rs + ZeroExt(immad)*2] = $Rt
add : Add            : add $Rd, $Rs, $Rt   : 0000 ---- ---- ---- : $Rd = $Rs + $Rt
sub : Subtract       : sub $Rd, $Rs, $Rt   : 0001 ---- ---- ---- : $Rd = $Rs - $Rt
ls  : LeftShift      : lf  $Rd, $Rs, $Rt   : 0010 ---- ---- ---- : $Rd = $Rs << $Rt
rs  : RightShift     : rs  $Rd, $Rs, $Rt   : 0011 ---- ---- ---- : $Rd = $Rs >> $Rt
and : LogicalAnd     : and $Rd, $Rs, $Rt   : 0100 ---- ---- ---- : $Rd = $Rs and $Rt
or  : LogicalOr      : or  $Rd, $Rs, $Rt   : 0101 ---- ---- ---- : $Rd = $Rs or $Rt
mult: multiple	     : mult $Rd, $Rs, $Rt  : 0110 ---- ---- ---- : $Rd = $Rs * $Rt
dev : devide         : dev  $Rd, $Rs, $Rt  : 0111 ---- ---- ---- : $Rd = $Rs / $Rt
boz : BranchOnZero   : boz $Rs, immad      : 1010 ---- --------- : ($Rs == 0)? PC = address #address = (pc and 1111111000000000) or (ZeroExt(immad)*2)
baw : BranchAnyway   : baw immad           : 1011 0000 --------  : PC = address             #address = (pc and 1111111000000000) or (ZeroExt(immad)*2)
sti : StoreImmidiate : sti $Rt, imm        : 1100 ---- --------  :


---- ---- ----
1011011000000000
0000000101011100
1011011101011100